{"name":"XSound","tagline":"HTML5 Web Audio API Library","body":"XSound.js\r\n=========\r\n  \r\nHTML5 Web Audio API Library\r\n  \r\n## Overview\r\n  \r\nThis library enables developers to use **Web Audio API by description like jQuery**.  \r\nIn concrete, this library may be useful to implement the following features.\r\n  \r\n* Create Sound\r\n* Play the One-Shot Audio\r\n* Play the Audio\r\n* Play the Media (Fallback by HTML5 MediaElement)\r\n* Play the MML (Music Macro Language)\r\n* Streaming (by WebRTC)\r\n* Effectors (Compressor / Wah / Equalizer / Tremolo / Phaser / Chorus / Delay / Reverb, and Original Effector ... etc)\r\n* Visualization (Overview in Time Domain / Time Domain / Spectrum)\r\n* Recording (Create WAVE file)\r\n* Session (by WebSocket)\r\n  \r\nThe structure of description is the following.\r\n  \r\n    X(/* sound source */).setup();\r\n    X(/* sound source */).param();\r\n    X(/* sound source */).ready();\r\n    X(/* sound source */).start();\r\n    X(/* sound source */).stop();\r\n  \r\n    X(/* sound source */).module(/* effectors, analyser, recorder, session */).setup();\r\n    X(/* sound source */).module(/* effectors, analyser, recorder, session */).param();\r\n    X(/* sound source */).module(/* effectors, analyser, recorder, session */).start();\r\n    X(/* sound source */).module(/* effectors, analyser, recorder, session */).stop();\r\n  \r\netc...\r\n  \r\n## Demo\r\n  \r\nThe application that uses this library is in the following URL.  \r\nPlease use Chrome (Mac / Windows) or Safari (Mac) or Opera (Mac / Windows).  \r\n\r\n* [X Sound](http://korilakkuma.github.io/X-Sound/)\r\n\r\n* [Music V](http://curtaincall.weblike.jp/portfolio-music-v/)\r\n\r\n* [Panner / Listener](http://curtaincall.weblike.jp/portfolio-x-sound/javascript/myworks/tests/AudioModule/test-audio-panner-listener)\r\n\r\nNow, I'm creating website for Web Audio API. Please use the following site for understanding README.  \r\n\r\n* [WEB SOUNDER](http://curtaincall.weblike.jp/portfolio-web-sounder/)\r\n  \r\n## Usage\r\n  \r\n    <script type=\"text/javascript\" src=\"xsound.min.js\"></script>\r\n  \r\nIn the case of displaying error message for development,\r\n  \r\n    <script type=\"text/javascript\" src=\"xsound.dev.js\"></script>\r\n  \r\nIn the case of using WebSocket,\r\n  \r\n    $ node xsound-server-session-websocket.js  // Use \"websocket\" module\r\n  \r\nor,\r\n  \r\n    $ node xsound-server-session-ws.js  // Use \"ws\" module\r\n  \r\nDefault port number is 8000.  \r\nThis port number can be changed by designating argument.  \r\nFor example,\r\n  \r\n    $ node xsound-server-session-websocket.js 8080  // Listen by 8080 ...\r\n  \r\nIf path to module does not exist, module path must be designated by the 2nd argument.  \r\nFor exmaple,\r\n  \r\n    $ node xsound-server-session-websocket.js 8080 /usr/local/lib/node_modules/websocket/lib/websocket.js\r\n  \r\nIn the case of recording log, the path of log file must be designated by the 3rd argument.\r\n  \r\n    $ node xsound-server-session-websocket.js 8080 /usr/local/lib/node_modules/websocket/lib/websocket.js websocket.log\r\n  \r\n## Global Objects\r\n  \r\nThis library defines 2 global objects. These are \"X\" and \"XSound\".  \r\nIf \"X\" is used already in the application, \"X\" can be removed by \"noConflict\" method\r\n  \r\n    // Remove \"X\"\r\n    XSound.noConflict();\r\n\r\n    XSound(/* .... */);\r\n\r\n    // ....\r\n  \r\nIn the case of removing both of global objects,\r\n  \r\n    // Remove \"X\", \"XSound\"\r\n    var $ = XSound.noConflict(true);  // change variable name \"$\" freely\r\n  \r\nSome constant values are defined by these global objects as static property.\r\n  \r\n    // Can browser use this library ?\r\n    if (X.IS_XSOUND) {\r\n        // Can use Web Audio API\r\n\r\n        // Sampling Rate\r\n        console.log(XSound.SAMPLE_RATE);\r\n        console.log(X.SAMPLE_RATE);\r\n\r\n        // Buffer size (for ScriptProcessorNode)\r\n        console.log(XSound.BUFFER_SIZE);\r\n        console.log(X.BUFFER_SIZE);\r\n\r\n        // The number of input channels\r\n        console.log(XSound.NUM_INPUT);\r\n        console.log(X.NUM_INPUT);\r\n\r\n        // The number of output channels\r\n        console.log(XSound.NUM_OUTPUT);\r\n        console.log(X.NUM_OUTPUT);\r\n    } else {\r\n        // Cannot use this library\r\n    }\r\n  \r\n### Error Message\r\n  \r\nThe \"error\" static method changes the destination of error message for development.\r\n  \r\n    X.error('ALERT');      // -> window.alert()\r\n    X.error('CONSOLE');    // -> console.error()\r\n    X.error('EXCEPTION');  // -> throw new Error()\r\n    X.error('NONE');       // -> Not output\r\n  \r\nOf course, the library for development (xsound-dev.js) must be read.\r\n  \r\n### Get \"currentTime\" property in the instance of AudioContext\r\n  \r\nThe way of accessing [the \"currentTime\" property in AudioContext](http://www.w3.org/TR/webaudio/#attributes-AudioContext) is the following,\r\n  \r\n    // Can browser use this library ?\r\n    if (X.IS_XSOUND) {\r\n        // Getter only\r\n        console.log(XSound.getCurrentTime());\r\n        console.log(X.getCurrentTime());\r\n    }\r\n  \r\n## Change Buffer Size for ScriptProcessorNode\r\n  \r\nThe buffer size for ScriptProcessorNode is selected automaticly in the case of default.  \r\nBut, if the selected size is not adequate, the buffer size can be changed.  \r\nThe selectable buffer size is one of 256, 512, 1024, 2048, 4096, 8192, 16384.  \r\nIn addition, it is necessary that this process is executed before the all of processes in \"XSound\".\r\n  \r\n    // for example\r\n    X('oscillator').resize(2048);\r\n    X('oneshot').resize(1024);\r\n    X('audio').resize(16384);\r\n    X('media').resize(16384);\r\n    X('stream').resize(8192);\r\n  \r\n## Create Sound\r\n  \r\n### Initialization\r\n  \r\nIn the case of using single sound,\r\n  \r\n    // The argument is initial state\r\n    X('oscillator').setup(true);\r\n  \r\nIn the case of using multiple sounds,\r\n  \r\n    // 4 sounds\r\n    X('oscillator').setup([true, true, true, false]);\r\n  \r\n### Start Sound\r\n  \r\nIn the case of single sound,\r\n  \r\n    // 440 Hz (A)\r\n    X('oscillator').ready(0, 0).start(440);  // or, X('oscillator').start(440);\r\n  \r\nor,\r\n  \r\n    // 440 Hz (A) is the 49th in keyboard of piano\r\n    X('oscillator').ready(0, 0).start(X.toFrequencies([49]));  // or, X('oscillator').start(X.toFrequencies([49]));\r\n  \r\nIn the case of multi sounds (for example, chord),\r\n  \r\n    // Set up 4 sources\r\n    X('oscillator').setup([true, true, true, false]);\r\n\r\n    var base = 40;\r\n\r\n    // C major\r\n    X('oscillator').ready(0, 0).start(X.toFrequencies([base, (base + 4), (base + 7)]));\r\n\r\n    // C minor\r\n    X('oscillator').ready(0, 0).start(X.toFrequencies([base, (base + 3), (base + 7)]));\r\n\r\n    // Change the 4th oscillator's state\r\n    X('oscillator', 3).state(true);  // Refer to the following \"Manage State\"\r\n\r\n    // C7\r\n    X('oscillator').ready(0, 0).start(X.toFrequencies([base, (base + 4), (base + 7), (base + 10)]));\r\n\r\n    // Cm7\r\n    X('oscillator').ready(0, 0).start(X.toFrequencies([base, (base + 3), (base + 7), (base + 10)]));\r\n  \r\n### Stop Sound\r\n  \r\n    X('oscillator').stop();\r\n  \r\n### Sound Scheduling\r\n  \r\n    // for example, Starting after 5 seconds, to stop after 10 seconds,\r\n    X('oscillator').ready(5, 10).start(440);\r\n  \r\n### Master Volume\r\n  \r\n    // Getter\r\n    var volume = X('oscillator').param('masterVolume');  // The default value is 1\r\n\r\n    // Setter\r\n    X('oscillator').param('masterVolume', 0.5);  // The range of value is between 0 and 1\r\n\r\n    // Associative array\r\n    X('oscillator').param({masterVolume : 0.5});\r\n  \r\n### Envelope Generator\r\n  \r\n     // Getter\r\n     var a = X('oscillator').module('eg').param('attack');   // The default value is 0.01\r\n     var d = X('oscillator').module('eg').param('decay');    // The default value is 0.30\r\n     var s = X('oscillator').module('eg').param('sustain');  // The default value is 0.50\r\n     var r = X('oscillator').module('eg').param('release');  // The default value is 1.00\r\n\r\n    // Setter\r\n    X('oscillator').module('eg').param('attack', 0.5);   // The range of value is between 0 and 1\r\n    X('oscillator').module('eg').param('decay', 0.5);    // The range of value is between 0 and 1\r\n    X('oscillator').module('eg').param('sustain', 0.5);  // The range of value is between 0 and 1\r\n    X('oscillator').module('eg').param('release', 0.5);  // The range of value is between 0 and 1\r\n\r\n    // Method chain\r\n    X('oscillator').module('eg').param('attack', 0.5)\r\n                                .param('decay', 0.5)\r\n                                .param('sustain', 0.5)\r\n                                .param('release', 0.5);\r\n\r\n     // Associative array\r\n    X('oscillator').module('eg').param({\r\n        attack  : 0.5,\r\n        decay   : 0.5,\r\n        sustain : 0.5,\r\n        release : 0.5\r\n    });\r\n  \r\n### Glide\r\n  \r\n    // Getter\r\n    var type = X('oscillator').module('glide').param('type');  // The default value is 'linear'\r\n    var time = X('oscillator').module('glide').param('time');  // The default value is 0\r\n\r\n    // Setter\r\n    X('oscillator').module('glide').param('type', 'exponential');  // either 'linear' or 'exponential'\r\n    X('oscillator').module('glide').param('time', 5);              // This value is greater than or equal to 0\r\n\r\n    // Associative array\r\n    X('oscillator').module('glide').param({\r\n        type : 'exponential',\r\n        time : 5\r\n    });\r\n  \r\n### Wave Type / Gain / Octave / Fine\r\n  \r\nThe 2nd argument of \"X\" or \"XSound\" is number type for designating each oscillator.  \r\nFor example, if 3 oscillators are used, this argument is either 0, 1 or 2.\r\n  \r\n    // Getter\r\n    var type   = X('oscillator', 0).param('type');    // The default value is 'sine'\r\n    var volume = X('oscillator', 0).param('volume');  // The default value is 1\r\n    var octave = X('oscillator', 0).param('octave');  // The default value is 0\r\n    var fine   = X('oscillator', 0).param('fine');    // The default value is 0\r\n\r\n    // Setter\r\n    X('oscillator', 0).param('type', 'sawtooth');  // one of 'sine', 'square', 'sawtooth', 'triangle'\r\n    X('oscillator', 0).param('volume', 0.5);       // The range of value is between 0 and 1\r\n    X('oscillator', 0).param('octave', 1.0);       // The range of value is between -4 and 4\r\n    X('oscillator', 0).param('fine', 100);         // The range of value is between -1200 and 1200\r\n\r\n    // Method chain\r\n    X('oscillator', 0).param('type', 'sawtooth')\r\n                      .param('volume', 0.5)\r\n                      .param('octave', 1.0)\r\n                      .param('fine', 100);\r\n\r\n    // Associative array\r\n    X('oscillator', 0).param({\r\n        type   : 'sawtooth',\r\n        volume : 0.5,\r\n        octave : 1.0,\r\n        fine   : 100\r\n    });\r\n  \r\n### Custom Wave\r\n  \r\n  In the case of using [custom type in OscillatorNode](http://www.w3.org/TR/webaudio/#attributes-OscillatorNode),\r\n  \r\n    var reals = new Float32Array([0, 1, 0.5, 0.25, 0.125]);  // Array size must be less than or equal to 4096\r\n    var imags = new Float32Array([0, 1, 0.5, 0.25, 0.125]);  // Array size must be less than or equal to 4096\r\n\r\n    X('oscillator', 0).param('type', {real : reals, imag : images});\r\n  \r\n### Manage State\r\n  \r\nThe 2nd argument of \"X\" or \"XSound\" is number type for designating each oscillator.  \r\nFor example, if 3 oscillators are used, this argument is either 0, 1 or 2.\r\n  \r\n    // Getter\r\n    var state  = X('oscillator', 0).state();  // Boolean type\r\n\r\n    // Setter\r\n    X('oscillator', 0).state(true);      // Boolean type\r\n    X('oscillator', 0).state('toggle');  // Change state according to current state\r\n  \r\n## Play the One-Shot Audio\r\n  \r\n### Initialization\r\n  \r\nFor example, the following 12 one-shot audios are corresponded to 88 keyboards of Piano.\r\n  \r\n    var base = 'http://xxx.jp/one-shots/';\r\n    var urls = [\r\n        (base + 'C.mp3'),\r\n        (base + 'Ch.mp3'),\r\n        (base + 'D.mp3'),\r\n        (base + 'Dh.mp3'),\r\n        (base + 'E.mp3'),\r\n        (base + 'F.mp3'),\r\n        (base + 'Fh.mp3'),\r\n        (base + 'G.mp3'),\r\n        (base + 'Gh.mp3'),\r\n        (base + 'A.mp3'),\r\n        (base + 'Ah.mp3'),\r\n        (base + 'B.mp3')\r\n    ];\r\n\r\n    // for \"X('oneshot').setup()\"\r\n    var settings = new Array(88);\r\n\r\n    for (var i = 0, len = settings.length; i < len; i++) {\r\n        var setting = {\r\n            buffer : 0,      // for selecting the instance of AudioBuffer\r\n            rate   : 1,      // for \"playbackRate\" property in the instance of AudioBufferSourceNode\r\n            loop   : false,  // for \"loop\" property in the instance of AudioBufferSourceNode\r\n            start  : 0,      // for \"loopStart\" property in the instance of AudioBufferSourceNode\r\n            end    : 0,      // for \"loopEnd\" property in the instance of AudioBufferSourceNode\r\n            volume : 1       // for the instance of GainNode\r\n        };\r\n\r\n        // Compute index for selecting the instance of AudioBuffer\r\n        setting.buffer = (i + 9) % 12;\r\n\r\n        // Compute \"playbackRate\" property in the instance of AudioBufferSourceNode\r\n        if ((i >= 0) && (i <= 2)) {\r\n            setting.rate = 0.0625;\r\n        } else if ((i >= 3) && (i <= 14)) {\r\n            setting.rate = 0.125;\r\n        } else if ((i >= 15) && (i <= 26)) {\r\n            setting.rate = 0.25;\r\n        } else if ((i >= 27) && (i <= 38)) {\r\n            setting.rate = 0.5;\r\n        } else if ((i >= 39) && (i <= 50)) {\r\n            setting.rate = 1;\r\n        } else if ((i >= 51) && (i <= 62)) {\r\n            setting.rate = 2;\r\n        } else if ((i >= 63) && (i <= 74)) {\r\n            setting.rate = 4;\r\n        } else if ((i >= 75) && (i <= 86)) {\r\n            setting.rate = 8;\r\n        } else if ((i >= 87) && (i <= 98)) {\r\n            setting.rate = 16;\r\n        }\r\n\r\n        settings[i] = setting;\r\n    }\r\n\r\n    // Load one-shot audios\r\n    try {\r\n        X('oneshot').setup({\r\n            resources : urls,\r\n            settings  : settings,\r\n            timeout   : 60000,\r\n            success : function(event, buffers) {\r\n                // \"event\" is XMLHttpRequestProgressEvent\r\n                // \"buffers\" is the instances of AudioBuffer\r\n            },\r\n            error : function(event, textStatus) {\r\n                // \"event\" is one of XMLHttpRequestProgressEvent, \"onerror\" event object in FileReader, null\r\n                // \"textStatus\" is one of 'error', 'timeout', 'decode', error code in FileReader\r\n            },\r\n            progress : function(event) {\r\n                // \"event\" is XMLHttpRequestProgressEvent\r\n            }\r\n        });\r\n    } catch (error) {\r\n        window.alert(error.message);\r\n        return;\r\n    }\r\n  \r\n### Start / Stop Audio\r\n  \r\n    // for selecting the instance of AudioBuffer\r\n    var index = 48;\r\n\r\n    X('oneshot').ready(0, 0).start(index);  // or, X('oneshot').start(index);\r\n    X('oneshot').stop(index);\r\n  \r\n### Sound Scheduling\r\n  \r\n    var index = 48;\r\n  \r\n    // for example, Starting after 5 seconds, to stop after 10 seconds,\r\n    X('oneshot').ready(5, 10).start(index);\r\n  \r\n    // Method chain\r\n    X('oneshot').ready(5, 10).start(index).ready(15, 20).start((index + 12)) /* ... */ ;\r\n  \r\n### Master Volume / Transpose\r\n  \r\n    // Getter\r\n    var volume    = X('oneshot').param('masterVolume');  // The default value is 1\r\n    var transpose = X('oneshot').param('transpose');     // The default value is 1\r\n\r\n    // Setter\r\n    X('oneshot').param('masterVolume', 0.5);  // The range of value is between 0 and 1\r\n    X('oneshot').param('transpose', 1.5);     // The range of value is greater than 0\r\n\r\n    // Method chain\r\n    X('oneshot').param('masterVolume', 0.5)\r\n                .param('transpose', 1.5);\r\n\r\n    // Associative array\r\n    X('oneshot').param({\r\n        masterVolume : 0.5,\r\n        transpose    : 1.5\r\n    });\r\n  \r\n### Envelope Generator\r\n  \r\n    // Getter\r\n    var a = X('oneshot').module('eg').param('attack');   // The default value is 0.01\r\n    var d = X('oneshot').module('eg').param('decay');    // The default value is 0.30\r\n    var s = X('oneshot').module('eg').param('sustain');  // The default value is 0.50\r\n    var r = X('oneshot').module('eg').param('release');  // The default value is 1.00\r\n\r\n    // Setter\r\n    X('oneshot').module('eg').param('attack', 0.5);   // The range of value is between 0 and 1\r\n    X('oneshot').module('eg').param('decay', 0.5);    // The range of value is between 0 and 1\r\n    X('oneshot').module('eg').param('sustain', 0.5);  // The range of value is between 0 and 1\r\n    X('oneshot').module('eg').param('release', 0.5);  // The range of value is between 0 and 1\r\n\r\n    // Method chain\r\n    X('oneshot').module('eg').param('attack', 0.5)\r\n                             .param('decay', 0.5)\r\n                             .param('sustain', 0.5)\r\n                             .param('release', 0.5);\r\n\r\n     // Associative array\r\n    X('oneshot').module('eg').param({\r\n        attack  : 0.5,\r\n        decay   : 0.5,\r\n        sustain : 0.5,\r\n        release : 0.5\r\n    });\r\n  \r\n## Play the Audio\r\n  \r\n### Initialization\r\n  \r\nRegister callback functions.\r\n  \r\n    X('audio').setup({\r\n        decode : function(arrayBuffer) {\r\n            // While \"decodeAudioData\" is executing, this callback function is executed\r\n            // for example, this callback function displays progress bar\r\n\r\n            // \"arrayBuffer\" is the instance of ArrayBuffer\r\n        },\r\n        ready : function(buffer) {\r\n            // When \"decodeAudioData\" ended, this callback function is executed\r\n            // for example, this callback function makes UI valid for starting audio\r\n\r\n            // \"buffer\" is the instance of AudioBuffer\r\n        },\r\n        start : function(source, currentTime) {\r\n            // When audio starts, this callback function is executed\r\n            // for example, this callback function updates UI for stopping audio\r\n\r\n            // \"source\" is the instance of AudioBufferSourceNode\r\n            // \"currentTime\" is current time (position) in the played audio\r\n        },\r\n        stop : function(source, currentTime) {\r\n            // When audio stopped, this callback function is executed\r\n            // for example, this callback function updates UI for starting audio\r\n\r\n            // \"source\" is the instance of AudioBufferSourceNode\r\n            // \"currentTime\" is current time (position) in the played audio\r\n        },\r\n        update : function(source, currentTime) {\r\n            // While audio is playing, this callback function is executed\r\n            // for example, this callback updates text for displaying current time\r\n\r\n            // \"source\" is the instance of AudioBufferSourceNode\r\n            // \"currentTime\" is current time (position) in the played audio\r\n        },\r\n        ended : function(source, currentTime) {\r\n            // When audio ended, this callback function is executed\r\n            // for example, this callback clears UI for playing the audio\r\n\r\n            // \"source\" is the instance of AudioBufferSourceNode\r\n            // \"currentTime\" is current time in audio\r\n        },\r\n        error : function() {\r\n            // When \"decodeAudioData\" failed, this callback function is executed\r\n        }\r\n    });\r\n  \r\n### Ready\r\n  \r\nIt is required to create the instance of AudioBuffer in order to to play the audio.\r\n  \r\n    // \"X('audio').ready()\" method creates the instance of AudioBuffer\r\n\r\n    // Ajax\r\n    X.ajax({\r\n        url     : 'http://xxx.jp/sample.wav',  // Resource URL\r\n        timeout : 60000,                       // Timeout (1 minutes)\r\n        success : function(event, arrayBuffer) {\r\n            // \"event\" is XMLHttpRequestProgressEvent\r\n            // \"arrayBuffer\" is the instance of ArrayBuffer\r\n\r\n            // ArrayBuffer -> AudioBuffer -> AudioBufferSourceNode\r\n            X('audio').ready.call(X('audio'), arrayBuffer);\r\n        },\r\n        error : function(event, textStatus) {\r\n            // \"event\" is either XMLHttpRequestProgressEvent or \"onerror\" event object in FileReader\r\n            // \"textStatus\" is one of 'error', 'timeout', error code of FileReader\r\n        },\r\n        progress : function(event) {\r\n            // \"event\" is XMLHttpRequestProgressEvent\r\n        }\r\n    });\r\n\r\n    // <input type=\"file\">\r\n    document.querySelector('[type=\"file\"]').addEventListener('change', function(event) {\r\n        try {\r\n            // The returned value is the instance of File (extends Blob)\r\n            var file = X.file(\r\n                event   : event,\r\n                type    : 'ArrayBuffer',\r\n                success : function(event, arrayBuffer) {\r\n                    // \"event\" is \"onload\" event object in the instance of FileReader\r\n                    // \"arrayBuffer\" is the instance of ArrayBuffer\r\n\r\n                    // the instance of File -> ArrayBuffer -> AudioBuffer -> AudioBufferSourceNode\r\n                    X('audio').ready.call(X('audio'), arrayBuffer);\r\n                },\r\n                error : function(event, error) {\r\n                    // \"event\" is \"onerror\" event object in the instance of FileReader\r\n                },\r\n                progress : function(event) {\r\n                    // \"event\" is \"onprogress\" event object in the instance of FileReader\r\n                }\r\n            });\r\n        } catch (error) {\r\n            window.alert(error.message);\r\n        }\r\n    }, false);\r\n  \r\n### Start Audio\r\n  \r\nThe instance of AudioBufferSourceNode has been prepared already.\r\n  \r\n    X('audio').start(0);\r\n  \r\nIn the case of starting audio on the way of audio,\r\n  \r\n    var currentTime = 60;  // 60 sec\r\n\r\n    X('audio').start(currentTime);  // Start audio from 60 sec\r\n  \r\n### Stop Audio\r\n  \r\n    X('audio').stop();\r\n  \r\n### Start / Pause\r\n  \r\n    X('audio').toggle(X('audio').param('currentTime'));\r\n  \r\n### Parameters\r\n  \r\n    // Getter\r\n    var volume      = X('audio').param('masterVolume');  // The default value is 1\r\n    var rate        = X('audio').param('playbackRate');  // The default value is 1\r\n    var loop        = X('audio').param('loop');          // The default value is false\r\n    var currentTime = X('audio').param('currentTime');   // If the instance of AudioBuffer does not exist, this value is 0\r\n    var duration    = X('audio').param('duration');      // If the instance of AudioBuffer does not exist, this value is 0 (Getter only)\r\n    var smpleRate   = X('audio').param('sampleRate');    // If the instance of AudioBuffer does not exist, this value equals to \"X.SAMPLE_RATE\" (Getter only)\r\n    var channels    = X('audio').param('channels');      // If the instance of AudioBuffer does not exist, this value is 0\r\n\r\n    // Setter\r\n    X('audio').param('masterVolume', 0.5);  // The range of value is between 0 and 1\r\n    X('audio').param('playbackRate', 0.5);  // The range of value is greater than or equal to 0\r\n    X('audio').param('loop', false);\r\n    X('audio').param('currentTime', 60);    // The range of value is between 0 and audio duration\r\n\r\n    // Method chain\r\n    X('audio').param('masterVolume', 0.5)\r\n              .param('playbackRate', 0.5)\r\n              .param('loop', false)\r\n              .param('currentTime', 60);\r\n\r\n    // Associative array\r\n    X('audio').param({\r\n        masterVolume : 0.5,\r\n        playbackRate : 0.5,\r\n        loop         : false,\r\n        currentTime  : 60\r\n    });\r\n  \r\n### Vocal Canceler\r\n  \r\n    // Getter\r\n    var canceler = X('audio').module('vocalCanceler').param('depth');  // The default value is 0\r\n\r\n    // Setter\r\n    X('audio').module('vocalCanceler').param('depth', 0.5);  // The range of value is between 0 and 1\r\n\r\n    // Associative array\r\n    X('audio').module('vocalCanceler').param({depth : 0.5});\r\n  \r\n## Play the Media\r\n  \r\n### Initialization\r\n  \r\nGet node object of HTMLMediaElement and select media format and register callback functions.\r\n  \r\n    var mediaPlayer = null;\r\n  \r\n    if (X.IS_XSOUND) {\r\n        mediaPlayer = X('media');  // Use Web Audio API (MediaElementAudioSourceNode)\r\n    } else {\r\n        mediaPlayer = X('media');  // Not use Web Audio API (Fallback by MediaElement)\r\n    }\r\n\r\n    // ....\r\n\r\n    // The properties this object has are properties of \"loadstart\", \"loadedmetadata\", \"loadeddata\", \"canplay\", \"canplaythrough\", \"timeupdate\", \"ended\" ...etc \r\n    var callbacks = {};\r\n\r\n    // Element ID, Media type ('audio' or 'video'), Media format array, callback\r\n    try {\r\n        X('media').setup({\r\n            id        : 'audio-element',        // If this value is empty string, this method creates HTMLMediaElement\r\n            type      : 'audio',                // either 'audio' or 'video'\r\n            formats   : ['wav', 'ogg', 'mp3'],\r\n            callbacks : callbacks\r\n        });\r\n    } catch (error) {\r\n        // Cannot use HTML5 MediaElement (for example, less than IE9)\r\n        window.alert(error.message);\r\n        return;\r\n    }\r\n  \r\n### Ready\r\n  \r\nIt is required to create the instance of MediaElementAudioSourceNode in order to to play the media.\r\n  \r\n    X('media').ready('http://xxx.jp/sample.wav');  // The argument is path name or Data URL or Object URL for media resource\r\n  \r\n### Start Media\r\n  \r\nThe instance of MediaElementAudioSourceNode has been prepared already.\r\n  \r\n    X('media').start(0);\r\n  \r\nIn the case of starting media on the way of media,\r\n  \r\n    var currentTime = 60;  // 60 sec\r\n\r\n    X('media').start(currentTime);  // Start media from 60 sec\r\n  \r\n### Stop Media\r\n  \r\n    X('media').stop();\r\n  \r\n### Start / Pause\r\n  \r\n    X('media').toggle(X('media').param('currentTime'));\r\n  \r\n### Parameters\r\n  \r\n    // Getter\r\n    var volume      = X('media').param('masterVolume');  // The default value is 1\r\n    var rate        = X('media').param('playbackRate');  // The default value is 1\r\n    var currentTime = X('media').param('currentTime');   // The default value is 0\r\n    var loop        = X('media').param('loop');          // The default value is false\r\n    var muted       = X('media').param('muted');         // The default value is false\r\n    var controls    = X('media').param('controls');      // The default value is false\r\n    var width       = X('media').param('width');         // Video only\r\n    var height      = X('media').param('height');        // Video only\r\n    var duration    = X('media').param('duration');      // If media data does not exist, this value is 0 (Getter only)\r\n    var channels    = X('media').param('channels');      // If the instance of MediaElementAudioSourceNode does not exist, this value is 0\r\n\r\n    // Setter\r\n    X('media').param('masterVolume', 0.5);  // The range of value is between 0 and 1\r\n    X('media').param('playbackRate', 0.5);  // The range of value is greater than or equal to 0\r\n    X('media').param('currentTime', 60);    // The range of value is between 0 and audio duration\r\n    X('media').param('loop', false);\r\n    X('media').param('muted', false);\r\n    X('media').param('controls', false);\r\n    X('media').param('width', 600);\r\n    X('media').param('height', 480);\r\n\r\n    // Method chain\r\n    X('media').param('masterVolume', 0.5)\r\n              .param('playbackRate', 0.5)\r\n              .param('currentTime', 60)\r\n              .param('loop', false)\r\n              .param('muted', false)\r\n              .param('controls', false)\r\n              .param('width', 600)\r\n              .param('height', 480);\r\n\r\n    // Associative array\r\n    X('media').param({\r\n        masterVolume : 0.5,\r\n        playbackRate : 0.5,\r\n        currentTime  : 60,\r\n        loop         : false,\r\n        muted        : false,\r\n        controls     : false,\r\n        width        : 600,\r\n        height       : 480\r\n    });\r\n  \r\n### Vocal Canceler\r\n  \r\nVocal Canceler requires to use Web Audio API.\r\nTherefore, it is requires to check flag.\r\n  \r\n    if (X.IS_XSOUND) {\r\n        // Getter\r\n        var canceler = X('media').module('vocalCanceler').param('depth');  // The default value is 0\r\n\r\n        // Setter\r\n        X('media').module('vocalCanceler').param('depth', 0.5);  // The range of value is between 0 and 1\r\n\r\n        // Associative array\r\n        X('media').module('vocalCanceler').param({depth : 0.5});\r\n    } else {\r\n        // Cannot use Vocal Canceler\r\n    }\r\n  \r\n## Streaming\r\n  \r\n### Initialization\r\n  \r\n    var isVideo = true;  // In the case of streaming video. The default value is false\r\n\r\n    var streamCallback = function(stream) {\r\n         // \"stream\" is the instance of MediaStream\r\n    };\r\n\r\n    var errorCallback = function(error) {\r\n         // \"error\" is the instance of NavigatorUserMediaError\r\n    };\r\n\r\n    X('stream').setup(isVideo, streamCallback, errorCallback);\r\n  \r\n### Start Streaming\r\n  \r\n    try {\r\n        X('stream').start();\r\n    } catch (error) {\r\n        // Cannot use WebRTC\r\n        window.alert(error);\r\n    }\r\n  \r\n### Stop Streaming\r\n  \r\n    X('stream').stop();\r\n  \r\n### Start / Stop\r\n  \r\n    try {\r\n        X('stream').toggle();\r\n    } catch (error) {\r\n        // Cannot use WebRTC\r\n        window.alert(error);\r\n    }\r\n  \r\n### Parameters\r\n  \r\n    // Getter\r\n    var volume = X('stream').param('masterVolume');  // The default value is 1\r\n\r\n    // Setter\r\n    X('stream').param('masterVolume', 0.5);  // The range of value is between 0 and 1\r\n\r\n    // Associative array\r\n    X('stream').param({\r\n        masterVolume : 0.5\r\n    });\r\n  \r\n### Noise Gate\r\n  \r\n    // Getter\r\n    var noisegate = X('stream').module('noisegate').param('level');  // The default value is 0\r\n\r\n    // Setter\r\n    X('stream').module('noisegate').param('level', 0.3);  // The range of value is between 0 and 1\r\n\r\n    // Associative array\r\n    X('stream').module('noisegate').param({level : 0.3});\r\n  \r\n## Mix Sound Source\r\n  \r\nIn the case of mixing the cloned sound source with the original sound source,\r\n  \r\n    // for example, in the case of mixing 2 sound sources,\r\n\r\n    // Please refer \"Clone Sound Source\" section about \"clone\" method in \"X\" object\r\n    var cloned = X.clone();\r\n\r\n    var main = X('oscillator');\r\n    var sub  = cloned('oscillator');\r\n\r\n    main.setup([true]).ready(0, 0).start(440);\r\n    sub.setup([true]).ready(0, 0).start(880);\r\n\r\n    // Mix sounds\r\n    X('mixer').mix([main, sub]);\r\n  \r\n## Select Connected Module\r\n  \r\nThe default connection is the follwing.\r\n  \r\n\r\n1. panner\r\n\r\n1. compressor\r\n\r\n1. distortion\r\n\r\n1. wah\r\n\r\n1. equalizer\r\n\r\n1. filter\r\n\r\n1. autopanner\r\n\r\n1. tremolo\r\n\r\n1. ringmodulator\r\n\r\n1. phaser\r\n\r\n1. flanger\r\n\r\n1. chorus\r\n\r\n1. delay\r\n\r\n1. reverb\r\n  \r\nIf application does not use some effectors, the effector should be disconnected by \"state\" method.  \r\nFor example,\r\n  \r\n    var source   = /* 'oscillator' or 'oneshot' or 'audio' or 'media' or 'stream' or 'mixer' */;\r\n    var effector = /* 'panner' or 'compressor' or 'distortion' or 'wah' or 'equalizer' or 'filter' or 'autopanner' or 'tremolo' or 'ringmodulator' or 'phaser' or 'flanger' or 'chorus' or 'delay' or 'reverb' */;\r\n\r\n    // Getter\r\n    var state  = X(source).module(effector).state();  // Boolean type\r\n\r\n    // Setter\r\n    X(source).module(effector).state(false);     // Disconnect the designated effector\r\n    X(source).module(effector).state('toggle');  // Change state according to current state\r\n  \r\nDefault state is inactive  (false) except 'compressor' and 'equalizer'.  \r\nTherefore, application must change to active state (true) by \"state\" method.  \r\n  \r\nIn the case of selecting module,\r\n  \r\n    // For exmaple, source (input) -> ScriptProcessorNode -> masterVolume -> analyser -> AudioDestinationNode (output)\r\n    X('oscillator').start(440, []);\r\n    X('oneshot').start(0, []);\r\n    X('audio').start(0, []);\r\n    X('media').start(0, []);\r\n    X('stream').start([]);\r\n\r\n    // For exmaple, source (input) -> ScriptProcessorNode -> [ chorus -> delay ] -> masterVolume -> analyser -> AudioDestinationNode (output)\r\n    X('oscillator').start(440, [X('oscillator').module('chorus), X('oscillator').module('delay')]);\r\n    X('oneshot').start(0, [X('audio').module('chorus), X('audio').module('delay')]);\r\n    X('audio').start(0, [X('audio').module('chorus), X('audio').module('delay')]);\r\n    X('media').start(0, [X('media').module('chorus), X('media').module('delay')]);\r\n    X('stream').start([X('stream').module('chorus), X('stream').module('delay')]);\r\n  \r\n## Custom Sound Processor\r\n  \r\nIn ths case of customizing \"onaudioprocess\" event handler in the instance of ScriptProcessorNode,\r\n  \r\n    // for exmale, white noise\r\n    X('oscillator').start(440, [], function(event) {\r\n        var outputLs = event.outputBuffer.getChannelData(0);\r\n        var outputRs = event.outputBuffer.getChannelData(1);\r\n\r\n        for (var i = 0; i < this.bufferSize; i++) {\r\n            outputLs[i] = 2 * (Math.random() - 0.5);\r\n            outputRs[i] = 2 * (Math.random() - 0.5);\r\n        }\r\n    });\r\n\r\n    // for exmale, audio and white noise\r\n    X('audio').start(0, [], function(event) {\r\n        var inputLs = event.inputBuffer.getChannelData(0);\r\n        var inputRs = event.inputBuffer.getChannelData(1);\r\n        var outputLs = event.outputBuffer.getChannelData(0);\r\n        var outputRs = event.outputBuffer.getChannelData(1);\r\n\r\n        for (var i = 0; i < this.bufferSize; i++) {\r\n            outputLs[i] = (inputLs[i] + 2 * (Math.random() - 0.5)) / 2;\r\n            outputRs[i] = (inputRs[i] + 2 * (Math.random() - 0.5)) / 2;\r\n        }\r\n    });\r\n  \r\n## Effectors\r\n    \r\nThe following, the variable is one of 'oscillator', 'oneshot', 'audio', 'media', 'stream', 'mixer'.\r\n  \r\n    var source = /* 'oscillator' or 'oneshot' or 'audio' or 'media' or 'stream' or 'mixer' */;\r\n  \r\nIf effectors are used to X('media'), it is necessary to determine global flag (X.IS_XSOUND).  \r\nHowever, this is omitted the following.\r\n  \r\n### Compressor\r\n  \r\n    var params = {};\r\n  \r\n    // Getter\r\n    params.threshold = X(source).module('compressor').param('threshold');  // The default value is 24\r\n    params.knee      = X(source).module('compressor').param('knee');       // The default value is 30\r\n    params.ratio     = X(source).module('compressor').param('ratio');      // The default value is 12\r\n    params.attack    = X(source).module('compressor').param('attack');     // The default value is 0.003\r\n    params.release   = X(source).module('compressor').param('release');    // The default value is 0.25\r\n\r\n    // Setter\r\n    X(source).module('compressor').param('threshold', 24);  // The range of value is between -100 and 0\r\n    X(source).module('compressor').param('knee',30 );       // The range of value is between 0 and 40\r\n    X(source).module('compressor').param('ratio', 12);      // The range of value is between 1 and 20\r\n    X(source).module('compressor').param('attack', 0.003);  // The range of value is between 0 and 1\r\n    X(source).module('compressor').param('release', 0.25);  // The range of value is between 0 and 1\r\n\r\n    // Method chain\r\n    X(source).module('compressor').param('threshold', 24)\r\n                                  .param('knee',30 )\r\n                                  .param('ratio', 12)\r\n                                  .param('attack', 0.003)\r\n                                  .param('release', 0.25);\r\n\r\n    // Associative array\r\n    X(source).module('compressor').param({\r\n        threshold : 24,\r\n        knee      : 30,\r\n        ratio     : 12,\r\n        attack    : 0.003,\r\n        release   : 0.25\r\n    });\r\n  \r\n### Distortion\r\n  \r\n    var params = {};\r\n\r\n    // Getter\r\n    params.curve   = X(source).module('distortion').param('curve');    // The default value is 'clean'\r\n    params.samples = X(source).module('distortion').param('samples');  // The default value is 4096\r\n    params.drive   = X(source).module('distortion').param('drive');    // The default value is 1\r\n    params.color   = X(source).module('distortion').param('color');    // The default value is 350\r\n    params.tone    = X(source).module('distortion').param('tone');     // The default value is 350\r\n\r\n    // Setter\r\n    X(source).module('distortion').param('curve', 'overdirve');  // one of 'clean', 'crunch', 'overdrive', 'distortion', 'fuzz'\r\n    X(source).module('distortion').param('samples', 4096);       // The value must be greater than 0\r\n    X(source).module('distortion').param('drive', 0.5);          // The range of value is between 0 and 1\r\n    X(source).module('distortion').param('color', 4000);         // The range of value is between 10 and half the sample-rate\r\n    X(source).module('distortion').param('tone', 4000);          // The range of value is between 10 and half the sample-rate\r\n\r\n    // Method chain\r\n    X(source).module('distortion').param('curve', 'overdirve')\r\n                                  .param('samples', 4096)\r\n                                  .param('drive', 0.5)\r\n                                  .param('color', 4000)\r\n                                  .param('tone', 4000);\r\n\r\n    // Associative array\r\n    X(source).module('distortion').param({\r\n        curve   : 'overdrive',\r\n        samples : 4096,\r\n        drive   : 0.5,\r\n        color   : 4000,\r\n        tone    : 4000\r\n    });\r\n  \r\n### Wah\r\n  \r\n    var params = {};\r\n  \r\n    // Getter\r\n    params.frequency = X(source).module('wah').param('frequency');  // The default value is 350\r\n    params.depth     = X(source).module('wah').param('depth');      // The default value is 0\r\n    params.rate      = X(source).module('wah').param('rate');       // The default value is 0\r\n    params.resonance = X(source).module('wah').param('resonance');  // The default value is 1\r\n\r\n    // Setter\r\n    X(source).module('wah').param('frequency', 1000);  // The range of value is between 10 and half the sample-rate\r\n    X(source).module('wah').param('depth', 0.5);       // The range of value is between 0 and 1\r\n    X(source).module('wah').param('rate', 5);          // The range of value is greater than or equal to 0\r\n    X(source).module('wah').param('resonance', 20);    // The range of value is between 0.0001 and 1000\r\n\r\n    // Method chain\r\n    X(source).module('wah').param('frequency', 1000)\r\n                           .param('depth', 0.5)\r\n                           .param('rate', 5)\r\n                           .param('resonance', 20);\r\n\r\n    // Associative array\r\n    X(source).module('wah').param({\r\n        frequency : 1000,\r\n        depth     : 0.5,\r\n        rate      : 5,\r\n        resonance : 20\r\n    });\r\n  \r\n### Equalizer\r\n  \r\n    var params = {};\r\n\r\n    // Getter\r\n    params.bass     = X(source).module('equalizer').param('bass');      // The default value is 0\r\n    params.middle   = X(source).module('equalizer').param('middle');    // The default value is 0\r\n    params.treble   = X(source).module('equalizer').param('treble');    // The default value is 0\r\n    params.presence = X(source).module('equalizer').param('presence');  // The default value is 0\r\n\r\n    // Setter\r\n    X(source).module('equalizer').param('bass', 18);      // The range of value is between -40 and 40\r\n    X(source).module('equalizer').param('middle', 18);    // The range of value is between -40 and 40\r\n    X(source).module('equalizer').param('treble', 18);    // The range of value is between -40 and 40\r\n    X(source).module('equalizer').param('presence', 18);  // The range of value is between -40 and 40\r\n\r\n    // Method chain\r\n    X(source).module('equalizer').param('bass', 18)\r\n                                 .param('middle', 18)\r\n                                 .param('treble', 18)\r\n                                 .param('presence', 18);\r\n\r\n    // Associative array\r\n    X(source).module('equalizer').param({\r\n        bass     : 18,\r\n        middle   : 18,\r\n        treble   : 18,\r\n        presence : 18\r\n    });\r\n  \r\n### Filter\r\n  \r\n    var params = {};\r\n\r\n    // Getter\r\n    params.type      = X(source).module('filter').param('type');       // The default value is 'lowpass'\r\n    params.frequency = X(source).module('filter').param('frequency');  // The default value is 350\r\n    params.resonance = X(source).module('filter').param('Q');          // The default value is 1\r\n    params.gain      = X(source).module('filter').param('gain');       // The default value is 0\r\n    params.range     = X(source).module('filter').param('range');      // The default value is 0.1 (10 %)\r\n    params.attack    = X(source).module('filter').param('attack');     // The default value is 0.01\r\n    params.decay     = X(source).module('filter').param('decay');      // The default value is 0.3\r\n    params.sustain   = X(source).module('filter').param('sustain');    // The default value is 0.5\r\n    params.release   = X(source).module('filter').param('release');    // The default value is 1\r\n\r\n    // Setter\r\n    X(source).module('filter').param('type', 'lowpass');  // one of 'lowpass', 'highpass', 'bandpass', 'lowshelf', 'highshelf', 'peaking', 'notch', 'allpass'\r\n    X(source).module('filter').param('frequency', 1000);  // The range of value is between 10 and half the sample-rate\r\n    X(source).module('filter').param('Q', 20);            // The range of value is between 0.0001 and 1000\r\n    X(source).module('filter').param('gain', 18);         // The range of value is between -40 and 40\r\n    X(source).module('filter').param('range', 0.5);       // The range of value is between 0 and 1\r\n    X(source).module('filter').param('attack', 0.5);      // The range of value is between 0 and 1\r\n    X(source).module('filter').param('decay', 0.5);       // The range of value is between 0 and 1\r\n    X(source).module('filter').param('sustain', 0.5);     // The range of value is between 0 and 1\r\n    X(source).module('filter').param('release', 0.5);     // The range of value is between 0 and 1\r\n\r\n    // Method chain\r\n    X(source).module('filter').param('type', 'lowpass')\r\n                              .param('frequency', 1000)\r\n                              .param('Q', 20)\r\n                              .param('gain', 18)\r\n                              .param('range', 0.5)\r\n                              .param('attack', 0.5)\r\n                              .param('decay', 0.5)\r\n                              .param('sustain', 0.5)\r\n                              .param('release', 0.5);\r\n\r\n    // Associative array\r\n    X(source).module('filter').param({\r\n        type      : 'lowpass',\r\n        frequency : 1000,\r\n        Q         : 20,\r\n        gain      : 18,\r\n        range     : 0.5,\r\n        attack    : 0.5,\r\n        decay     : 0.5,\r\n        sustain   : 0.5,\r\n        release   : 0.5\r\n    });\r\n  \r\n### Auto Panner\r\n  \r\n    var params = {};\r\n\r\n    // Getter\r\n    params.depth = X(source).module('autopanner').param('depth');  // The default value is 0\r\n    params.rate  = X(source).module('autopanner').param('rate');   // The default value is 0\r\n\r\n    // Setter\r\n    X(source).module('autopanner').param('depth', 0.5);  // The range of value is between 0 and 1\r\n    X(source).module('autopanner').param('rate', 0.5);   // The range of value is greater than or equal to 0\r\n\r\n    // Method chain\r\n    X(source).module('autopanner').param('depth', 0.5)\r\n                                  .param('rate', 0.5);\r\n\r\n    // Associative array\r\n    X(source).module('autopanner').param({\r\n        depth : 0.5,\r\n        rate  : 0.5\r\n    });\r\n  \r\n### Tremolo\r\n  \r\n    var params = {};\r\n\r\n    // Getter\r\n    params.depth = X(source).module('tremolo').param('depth');  // The default value is 0\r\n    params.rate  = X(source).module('tremolo').param('rate');   // The default value is 0\r\n    params.wave  = X(source).module('tremolo').param('wave');   // The default value is 'sine'\r\n\r\n    // Setter\r\n    X(source).module('tremolo').param('depth', 0.5);        // The range of value is between 0 and 1\r\n    X(source).module('tremolo').param('rate', 5);           // The range of value is greater than or equal to 0\r\n    X(source).module('tremolo').param('wave', 'triangle');  // one of 'sine', 'square', 'sawtooth', 'triangle'\r\n\r\n    // Method chain\r\n    X(source).module('tremolo').param('depth', 0.5)\r\n                               .param('rate', 5)\r\n                               .param('wave', 'triangle');\r\n\r\n    // Associative array\r\n    X(source).module('tremolo').param({\r\n        depth : 0.5,\r\n        rate  : 5,\r\n        wave  : 'triangle'\r\n    });\r\n  \r\n### Ring Modulator\r\n  \r\n    var params = {};\r\n\r\n    // Getter\r\n    params.depth = X(source).module('ringmodulator').param('depth');  // The default value is 1\r\n    params.rate  = X(source).module('ringmodulator').param('rate');   // The default value is 0\r\n\r\n    // Setter\r\n    X(source).module('ringmodulator').param('depth', 0.5);  // The range of value is between 0 and 1\r\n    X(source).module('ringmodulator').param('rate', 1000);  // The range of value is greater than or equal to 0\r\n\r\n    // Method chain\r\n    X(source).module('ringmodulator').param('depth', 0.5)\r\n                                     .param('rate', 1000);\r\n\r\n    // Associative array\r\n    X(source).module('ringmodulator').param({\r\n        depth : 0.5,\r\n        rate  : 1000\r\n    });\r\n  \r\n### Phaser\r\n  \r\n    var params = {};\r\n\r\n    // Getter\r\n    params.stage     = X(source).module('pahser').param('stage');      // The default value is 12\r\n    params.frequency = X(source).module('phaser').param('frequnecy');  // The default value is 350\r\n    params.resonance = X(source).module('phaser').param('resonance');  // The default value is 1\r\n    params.depth     = X(source).module('phaser').param('depth');      // The default value is 0\r\n    params.rate      = X(source).module('phaser').param('rate');       // The default value is 0\r\n    params.mix       = X(source).module('phaser').param('mix');        // The default value is 0\r\n    params.feedback  = X(source).module('phaser').param('feedback');   // The default value is 0\r\n\r\n    // Setter\r\n    X(source).module('phaser').param('stage', 8);         // The range of value is between 0 and 24\r\n    X(source).module('phaser').param('frequency', 1000);  // The range of value is between 10 and half the sample-rate\r\n    X(source).module('phaser').param('resonance', 10);    // The range of value is between 0.0001 and 1000\r\n    X(source).module('phaser').param('depth', 0.5);       // The range of value is between 0 and 1\r\n    X(source).module('phaser').param('rate', 5);          // The range of value is greater than or equal to 0\r\n    X(source).module('phaser').param('mix', 0.5);         // The range of value is between 0 and 1\r\n    X(source).module('phaser').param('feedback', 0.5);    // The range of value is between 0 and 1\r\n\r\n    // Method chain\r\n    X(source).module('phaser').param('stage', 8)\r\n                              .param('frequency', 1000)\r\n                              .param('resonance', 10)\r\n                              .param('depth', 0.5)\r\n                              .param('rate', 5)\r\n                              .param('mix', 0.5)\r\n                              .param('feedback', 0.5);\r\n\r\n    // Associative array\r\n    X(source).module('phaser').param({\r\n        stage     : 8,\r\n        frequency : 1000,\r\n        resonance : 10,\r\n        depth     : 0.5,\r\n        rate      : 5,\r\n        mix       : 0.5,\r\n        feedback  : 0.5\r\n    });\r\n  \r\n### Flanger\r\n  \r\n    var params = {};\r\n\r\n    // Getter\r\n    params.time     = X(source).module('flanger').param('time');      // The default value is 0\r\n    params.depth    = X(source).module('flanger').param('depth');     // The default value is 0\r\n    params.rate     = X(source).module('flanger').param('rate');      // The default value is 0\r\n    params.mix      = X(source).module('flanger').param('mix');       // The default value is 0\r\n    params.tone     = X(source).module('flanger').param('tone');      // The default value is 350\r\n    params.feedback = X(source).module('flanger').param('feedback');  // The default value is 0\r\n\r\n    // Setter\r\n    X(source).module('flanger').param('time', 0.005);    // The range of value is between 0 and 1 (sec)\r\n    X(source).module('flanger').param('depth', 0.5);     // The range of value is between 0 and 1\r\n    X(source).module('flanger').param('rate', 5);        // The range of value is greater than or equal to 0\r\n    X(source).module('flanger').param('mix', 0.5);       // The range of value is between 0 and 1\r\n    X(source).module('flanger').param('tone', 4000);     // The range of value is between 10 and half the sample-rate\r\n    X(source).module('flanger').param('feedback', 0.5);  // The range of value is between 0 and 1\r\n    \r\n\r\n    // Method chain\r\n    X(source).module('flanger').param('time', 0.005)\r\n                               .param('depth', 0.5)\r\n                               .param('rate', 5)\r\n                               .param('mix', 0.5)\r\n                               .param('tone', 4000)\r\n                               .param('feedback', 0.5);\r\n\r\n    // Associative array\r\n    X(source).module('flanger').param({\r\n        time     : 0.005,\r\n        depth    : 0.5,\r\n        rate     : 5,\r\n        mix      : 0.5,\r\n        tone     : 4000,\r\n        feedback : 0.5\r\n    });\r\n  \r\n### Chorus\r\n  \r\n    var params = {};\r\n\r\n    // Getter\r\n    params.time     = X(source).module('chorus').param('time');      // The default value is 0\r\n    params.depth    = X(source).module('chorus').param('depth');     // The default value is 0\r\n    params.rate     = X(source).module('chorus').param('rate');      // The default value is 0\r\n    params.mix      = X(source).module('chorus').param('mix');       // The default value is 0\r\n    params.tone     = X(source).module('chorus').param('tone');      // The default value is 350\r\n    params.feedback = X(source).module('chorus').param('feedback');  // The default value is 0\r\n\r\n    // Setter\r\n    X(source).module('chorus').param('time',  0.020);    // The range of value is between 0 and 1 (sec)\r\n    X(source).module('chorus').param('depth', 0.05);     // The range of value is between 0 and 1\r\n    X(source).module('chorus').param('rate', 0.5);       // The range of value is greater than or equal to 0\r\n    X(source).module('chorus').param('mix', 0.5);        // The range of value is between 0 and 1\r\n    X(source).module('chorus').param('tone', 4000);      // The range of value is between 10 and half the sample-rate\r\n    X(source).module('chorus').param('feedback', 0.05);  // The range of value is between 0 and 1\r\n\r\n    // Method chain\r\n    X(source).module('chorus').param('time',  0.020)\r\n                              .param('depth', 0.05)\r\n                              .param('rate', 0.5)\r\n                              .param('mix', 0.5)\r\n                              .param('tone', 4000)\r\n                              .param('feedback', 0.05);\r\n\r\n    // Associative array\r\n    X(source).module('chorus').param({\r\n        time     : 0.020,\r\n        depth    : 0.05,\r\n        rate     : 0.5,\r\n        mix      : 0.5,\r\n        tone     : 4000,\r\n        feedback : 0.05\r\n    });\r\n  \r\n### Delay\r\n  \r\n    var params = {};\r\n\r\n    // Getter\r\n    params.time     = X(source).module('delay').param('delayTime');  // The default value is 0\r\n    params.dry      = X(source).module('delay').param('dry');        // The default value is 1\r\n    params.wet      = X(source).module('delay').param('wet');        // The default value is 0\r\n    params.tone     = X(source).module('delay').param('tone');       // The default value is 350\r\n    params.feedback = X(source).module('delay').param('feedback');   // The default value is 0\r\n\r\n    // Setter\r\n    X(source).module('delay').param('delayTime', 0.500);  // The range of value is between 0 and 5 (5000 msec)\r\n    X(source).module('delay').param('dry', 0.5);          // The range of value is between 0 and 1\r\n    X(source).module('delay').param('wet', 0.5);          // The range of value is between 0 and 1\r\n    X(source).module('delay').param('tone', 4000);        // The range of value is between 10 and half the sample-rate\r\n    X(source).module('delay').param('feedback', 0.5);     // The range of value is between 0 and 1\r\n\r\n    // Method chain\r\n    X(source).module('delay').param('delayTime', 0.500)\r\n                             .param('dry', 0.5)\r\n                             .param('wet', 0.5)\r\n                             .param('tone', 4000)\r\n                             .param('feedback', 0.5);\r\n\r\n    // Associative array\r\n    X(source).module('delay').param({\r\n        delayTime : 0.500,\r\n        dry       : 0.5,\r\n        wet       : 0.5,\r\n        tone      : 4000,\r\n        feedback  : 0.5\r\n    });\r\n  \r\n### Reverb\r\n  \r\nReverb effect requires ArrayBuffer of impulse response.\r\n  \r\n    // Ajax\r\n    X.ajax({\r\n        url     : 'http://xxx.jp/impulse.wav',  // Resource URL\r\n        timeout : 60000,                        // Timeout (1 minutes)\r\n        success : function(event, arrayBuffer) {\r\n            // \"event\" is XMLHttpRequestProgressEvent\r\n            // \"arrayBuffer\" is the instance of ArrayBuffer\r\n\r\n            // ArrayBuffer -> AudioBuffer -> \"buffer\" property in the instance of ConvolverNode\r\n            X(source).module('reverb').start.call(X(source).module('reverb'), arrayBuffer);\r\n        },\r\n        error : function(event, textStatus) {\r\n            // \"event\" is either XMLHttpRequestProgressEvent or \"onerror\" event object in FileReader\r\n            // \"textStatus\" is one of 'error', 'timeout', error code of FileReader\r\n        },\r\n        progress : function(event) {\r\n            // \"event\" is XMLHttpRequestProgressEvent\r\n        }\r\n    });\r\n\r\n    // <input type=\"file\">\r\n    document.querySelector('[type=\"file\"]').addEventListener('change', function(event) {\r\n        try {\r\n            // The returned value is the instance of File (extends Blob)\r\n            var file = X.file(\r\n                event   : event,\r\n                type    : 'ArrayBuffer',\r\n                success : function(event, arrayBuffer) {\r\n                    // \"event\" is \"onload\" event object in the instance of FileReader\r\n                    // \"arrayBuffer\" is the instance of ArrayBuffer\r\n\r\n                    // the instance of File -> ArrayBuffer -> AudioBuffer -> AudioBufferSourceNode\r\n                    X(source).module('reverb').start.call(X(source).module('reverb'), arrayBuffer);\r\n                },\r\n                error : function(event, error) {\r\n                    // \"event\" is \"onerror\" event object in the instance of FileReader\r\n                },\r\n                progress : function(event) {\r\n                    // \"event\" is \"onprogress\" event object in the instance of FileReader\r\n                }\r\n            });\r\n        } catch (error) {\r\n            window.alert(error.message);\r\n        }\r\n    }, false);\r\n  \r\nIf application requires many impulse responses, this library defines better method.\r\n  \r\n    // Array contains URLs for impulse response\r\n    var urls = [\r\n        'impulse-responses/s1_r1_b.wav',\r\n        'impulse-responses/s1_r2_b.wav',\r\n        'impulse-responses/s1_r3_b.wav',\r\n        'impulse-responses/s1_r4_b.wav',\r\n        'impulse-responses/s2_r1_b.wav',\r\n        'impulse-responses/s2_r2_b.wav',\r\n        'impulse-responses/s2_r3_b.wav',\r\n        'impulse-responses/s2_r4_b.wav',\r\n        'impulse-responses/s3_r1_b.wav',\r\n        'impulse-responses/s3_r2_b.wav',\r\n        'impulse-responses/s3_r3_b.wav',\r\n        'impulse-responses/s3_r4_b.wav',\r\n    ]\r\n\r\n    X(source).preset({\r\n        rirs    : urls,\r\n        timeout : 60000,\r\n        success : function(event, rirs) {\r\n            // \"event\" is XMLHttpRequestProgressEvent\r\n            // \"rirs\" is the instances of AudioBuffer for impulse response\r\n        },\r\n        error : function(event, textStatus) {\r\n            // \"event\" is one of XMLHttpRequestProgressEvent, \"onerror\" event object in FileReader, null\r\n            // \"textStatus\" is one of 'error', 'timeout', 'decode', error code in FileReader\r\n        },\r\n        progress : function(event) {\r\n            // \"event\" is XMLHttpRequestProgressEvent\r\n        }\r\n    });\r\n  \r\nor,\r\n  \r\n    /** @type {Array.<AudioBuffer>} */\r\n    var reverbs = [];\r\n\r\n    for (var i = 0, len = rirs.length; i < len; i++) {\r\n        X.ajax(rirs[i], 60000, function(event, arrayBuffer) {\r\n            X.decode(X.get(), arrayBuffer, function(audioBuffer) {\r\n                reverbs.push(audioBuffer);\r\n\r\n                // Complete ?\r\n                if (reverbs.length === rirs.length) {\r\n                    X(source).module('reverb').preset(reverbs);\r\n                }\r\n            }, function() {\r\n                // \"decodeAudioData\" method encountered an error.\r\n                window.alert('Decode error !!');\r\n            });\r\n        }, function(event, textStatus) {\r\n            // \"event\" is one of XMLHttpRequestProgressEvent, \"onerror\" event object in FileReader, null\r\n            // \"textStatus\" is one of 'error', 'timeout', 'decode', error code in FileReader\r\n        });\r\n    }\r\n\r\n    var params = {};\r\n\r\n    // Getter\r\n    params.dry  = X(source).module('reverb').param('dry');   // The default value is 1\r\n    params.wet  = X(source).module('reverb').param('wet');   // The default value is 0\r\n    params.tone = X(source).module('reverb').param('tone');  // The default value is 350\r\n    params.type = X(source).module('reverb').param('type');  // \"buffer\" property in ConvolverNode (Getter only)\r\n    params.rirs = X(source).module('reverb').param('rirs');  // Array contains the instances of AudioBuffer for impulse response (Getter only)\r\n\r\n    // Setter\r\n    X(source).module('reverb').param('dry', 0.5);    // The range of value is between 0 and 1\r\n    X(source).module('reverb').param('wet', 0.5);    // The range of value is between 0 and 1\r\n    X(source).module('reverb').param('tone', 4000);  // The range of value is between 10 and half the sample-rate\r\n\r\n    // Method chain\r\n    X(source).module('reverb').param('dry', 0.5)\r\n                              .param('wet', 0.5)\r\n                              .param('tone', 4000);\r\n\r\n    // Associative array\r\n    X(source).module('reverb').param({\r\n        dry  : 0.5,\r\n        wet  : 0.5,\r\n        tone : 4000\r\n    });\r\n  \r\n### Customized Effector\r\n  \r\nIf customized effector module is used, the module should be defined the following.\r\n  \r\n    function MyEffector(context) {\r\n        /* \"context\" is the instance of AudioContext */\r\n\r\n        this.isActive;         // Boolean type from Effector class\r\n        this.lfo;              // the instance of OscillatorNode from Effector class\r\n        this.depth;            // the instance of GainNode from Effector class\r\n\r\n        // It is necessary to connection from \"input\" and to \"output\"\r\n        // (The properties of \"input\" and \"output\" are inherited from Effector class)\r\n\r\n        /* this.input.connect( .... connect(this.output); */\r\n    };\r\n\r\n     /** @extends {Effector} */\r\n    X(source).install('myeffector', MyEffector);\r\n\r\n    /** @override */\r\n    MyEffector.prototype.param = function() {\r\n        /* Getter and Setter for accessible parameters */\r\n    };\r\n\r\n    /** \r\n     * This method starts LFO. Namely, this method starts Effector.\r\n     * @param {number} startTime This argument is in order to schedule parameter.\r\n     * @override\r\n     */\r\n    MyEffector.prototype.start = function(startTime) {\r\n        // ....\r\n    };\r\n\r\n    /** \r\n     * This method stops LFO, and prepares {OscillatorNode} again in the case of \"false\".\r\n     * @param {number} stopTime This argument is in order to schedule parameter.\r\n     * @param {number} releaseTime This argument is in order to schedule parameter when it is necessary to consider release time.\r\n     * @override\r\n     */\r\n    MyEffector.prototype.stop = function(stopTime, releaseTime) {\r\n        // ....\r\n    };\r\n\r\n    X(source).start(/* the 1st argument */, [/* Other modules ,*/ X(source).module('myeffector') /*, Other modules */]);\r\n  \r\nfor example,\r\n  \r\n    function SuperModulation(context) {\r\n        this.predelay = context.createDelay();\r\n        this.delay    = context.createDelay();\r\n        this.splitter = context.createChannelSplitter();\r\n        this.merger   = context.createChannelMerger();\r\n\r\n        this.dry      = context.createGain();\r\n        this.wet      = context.createGain();\r\n        this.feedback = context.createGain();\r\n\r\n        this.input.connect(this.dry);\r\n        this.dry.connect(this.output);\r\n\r\n        this.input.connect(this.splitter);\r\n        this.splitter.connect(this.predelay, 0);\r\n        this.splitter.connect(this.merger, 1, 1);\r\n        this.predelay.connect(this.merger, 0, 0);\r\n        this.merger.connect(this.delay);\r\n        this.delay.connect(this.wet);\r\n        this.wet.connect(this.output);\r\n\r\n        this.delay.connect(this.feedback);\r\n        this.feedback.connect(this.delay);\r\n\r\n        this.lfo.connect(this.feedback.gain);\r\n\r\n        this.predelay.delayTime.value = 1;\r\n        this.delay.delayTime.value    = 0;\r\n        this.dry.gain.value           = 1;\r\n        this.wet.gain.value           = 0;\r\n\r\n        this.values = {\r\n            pre  : this.predelay.delayTime,\r\n            time : this.delay.delayTime,\r\n            dry  : this.dry.gain,\r\n            wet  : this.wet.gain\r\n        };\r\n\r\n        this.isActive = true;\r\n    };\r\n\r\n    /** @extends {Effector} */\r\n    X('oscillator').install('supermodulation', SuperModulation);\r\n\r\n    /** @override */\r\n    SuperModulation.prototype.param = function(key, value) {\r\n        if (value === undefined) {\r\n            return this.values[key].value;  // Getter\r\n        } else {\r\n            this.values[key].value = value;  // Setter\r\n\r\n        }\r\n    };\r\n\r\n    /** @override */\r\n    SuperModulation.prototype.start = function(startTime) {\r\n        if (this.isActive) {\r\n            this.lfo.start(startTime);\r\n        }\r\n    };\r\n\r\n    /** @override */\r\n    SuperModulation.prototype.stop = function(stopTime, releaseTime) {\r\n        if (this.isActive) {\r\n            this.lfo.stop(stopTime + releaseTime);\r\n        }\r\n    };\r\n\r\n    X('oscillator').module('supermodulation').param('pre',  0.025);\r\n    X('oscillator').module('supermodulation').param('time', 0.050);\r\n    X('oscillator').module('supermodulation').param('dry',  0.700);\r\n    X('oscillator').module('supermodulation').param('wet',  0.300);\r\n\r\n    X('oscillator').start(440, [X('oscillator').module('supermodulation')]);\r\n  \r\n### Panner\r\n  \r\n    var params = {};\r\n\r\n    // Getter\r\n    params.x = X(source).module('panner').param('x');  // 'x' for setPosition. The default value is 0\r\n    params.y = X(source).module('panner').param('y');  // 'y' for setPosition. The default value is 0\r\n    params.z = X(source).module('panner').param('z');  // 'z' for setPosition. The default value is 0\r\n\r\n    params.ox = X(source).module('panner').param('ox');  // 'ox' for setOrientation. The default value is 1\r\n    params.oy = X(source).module('panner').param('oy');  // 'oy' for setOrientation. The default value is 0\r\n    params.oz = X(source).module('panner').param('oz');  // 'oz' for setOrientation. The default value is 0\r\n\r\n    params.vx = X(source).module('panner').param('vx');  // 'vx' for setVelocity. The default value is 0\r\n    params.vy = X(source).module('panner').param('vy');  // 'vy' for setVelocity. The default value is 0\r\n    params.vz = X(source).module('panner').param('vz');  // 'vz' for setVelocity. The default value is 0\r\n\r\n    params.refDistance   = X(source).module('panner').param('refDistance');    // The default value is 1\r\n    params.maxDistance   = X(source).module('panner').param('maxDistance');    // The default value is 10000\r\n    params.rolloffFactor = X(source).module('panner').param('rolloffFactor');  // The default value is 1\r\n\r\n    params.coneInnerAngle = X(source).module('panner').param('coneInnerAngle');  // The default value is 360\r\n    params.coneOuterAngle = X(source).module('panner').param('coneOuterAngle');  // The default value is 360\r\n    params.coneOuterGain  = X(source).module('panner').param('coneOuterGain');   // The default value is 0\r\n\r\n    params.pannningModel = X(source).module('panner').param('panningModel');   // The default value is 'HRTF'\r\n    params.distanceModel = X(source).module('panner').param('distanceModel');  // The default value is 'inverse'\r\n\r\n    // Setter\r\n    X(source).module('panner').param('x', 0);\r\n    X(source).module('panner').param('y', 0);\r\n    X(source).module('panner').param('z', 0);\r\n\r\n    X(source).module('panner').param('ox', 1);\r\n    X(source).module('panner').param('oy', 0);\r\n    X(source).module('panner').param('oz', 0);\r\n\r\n    X(source).module('panner').param('vx', 0);\r\n    X(source).module('panner').param('vy', 0);\r\n    X(source).module('panner').param('vz', 0);\r\n\r\n    X(source).module('panner').param('refDistance', 1);\r\n    X(source).module('panner').param('maxDistance', 10000);\r\n    X(source).module('panner').param('rolloffFactor', 1);\r\n\r\n    X(source).module('panner').param('coneInnerAngle', 360);\r\n    X(source).module('panner').param('coneOuterAngle', 360);\r\n    X(source).module('panner').param('coneOuterGain', 0);\r\n\r\n    X(source).module('panner').param('panningModel', 'HRTF');      // either 'equalpower' or 'HRTF'\r\n    X(source).module('panner').param('distanceModel', 'inverse');  // one of 'linear', 'inverse', 'exponential'\r\n\r\n    // Method chain\r\n    X(source).module('panner').param('x', 0)\r\n                              .param('y', 0)\r\n                              .param('z', 0)\r\n                              .param('ox', 1)\r\n                              .param('oy', 0)\r\n                              .param('oz', 0)\r\n                              .param('vx', 0)\r\n                              .param('vy', 0)\r\n                              .param('vz', 0)\r\n                              .param('refDistance', 1)\r\n                              .param('maxDistance', 10000)\r\n                              .param('rolloffFactor', 1)\r\n                              .param('coneInnerAngle', 360)\r\n                              .param('coneOuterAngle', 360)\r\n                              .param('coneOuterGain', 0)\r\n                              .param('panningModel', 'HRTF')\r\n                              .param('distanceModel', 'inverse');\r\n\r\n    // Associative array\r\n    X(source).module('panner').param({\r\n        x  : 0,\r\n        y  : 0,\r\n        z  : 0,\r\n        ox : 1,\r\n        oy : 0,\r\n        oz : 0,\r\n        vx : 0,\r\n        vy : 0,\r\n        vz : 0,\r\n        refDistance    : 1,\r\n        maxDistance    : 10000,\r\n        rolloffFactor  : 1,\r\n        coneInnerAngle : 360,\r\n        coneOuterAngle : 360,\r\n        coneOuterGain  : 0,\r\n        panningModel   : 'HRTF',\r\n        distanceModel  : 'inverse'\r\n    });\r\n  \r\n### Listener\r\n  \r\n    var params = {};\r\n\r\n    // Getter\r\n    params.dopplerFactor = X(source).module('listener').param('dopplerFactor');  // The default value is 1\r\n    params.speedOfSound  = X(source).module('listener').param('speedOfSound');   // The default value is 343.3\r\n\r\n    params.x = X(source).module('listener').param('x');  // 'x' for setPosition. The default value is 0\r\n    params.y = X(source).module('listener').param('y');  // 'y' for setPosition. The default value is 0\r\n    params.z = X(source).module('listener').param('z');  // 'z' for setPosition. The default value is 0\r\n\r\n    params.fx = X(source).module('listener').param('fx');  // 'fx' for setOrientation (front). The default value is 0\r\n    params.fy = X(source).module('listener').param('fy');  // 'fy' for setOrientation (front). The default value is 0\r\n    params.fz = X(source).module('listener').param('fz');  // 'fz' for setOrientation (front). The default value is -1\r\n    params.ux = X(source).module('listener').param('ux');  // 'ux' for setOrientation (up). The default value is 0\r\n    params.uy = X(source).module('listener').param('uy');  // 'uy' for setOrientation (up). The default value is 1\r\n    params.uz = X(source).module('listener').param('uz');  // 'uz' for setOrientation (up). The default value is 0\r\n\r\n    params.vx = X(source).module('listener').param('vx');  // 'vx' for setVelocity. The default value is 0\r\n    params.vy = X(source).module('listener').param('vy');  // 'vy' for setVelocity. The default value is 0\r\n    params.vz = X(source).module('listener').param('vz');  // 'vz' for setVelocity. The default value is 0\r\n\r\n    // Setter\r\n    X(source).module('listener').param('dopplerFactor', 1);\r\n    X(source).module('listener').param('speedOfSound', 343.3);\r\n\r\n    X(source).module('listener').param('x', 0);\r\n    X(source).module('listener').param('y', 0);\r\n    X(source).module('listener').param('z', 0);\r\n\r\n    X(source).module('listener').param('fx', 0);\r\n    X(source).module('listener').param('fy', 0);\r\n    X(source).module('listener').param('fz', -1);\r\n    X(source).module('listener').param('ux', 0);\r\n    X(source).module('listener').param('uy', 1);\r\n    X(source).module('listener').param('uz', 0);\r\n\r\n    X(source).module('listener').param('vx', 0);\r\n    X(source).module('listener').param('vy', 0);\r\n    X(source).module('listener').param('vz', 0);\r\n\r\n    // Method chain\r\n    X(source).module('listener').param('dopplerFactor', 1)\r\n                                .param('speedOfSound', 343.3)\r\n                                .param('x', 0)\r\n                                .param('y', 0)\r\n                                .param('z', 0)\r\n                                .param('fx', 0)\r\n                                .param('fy', 0)\r\n                                .param('fz', -1)\r\n                                .param('ux', 0)\r\n                                .param('uy', 1)\r\n                                .param('uz', 0)\r\n                                .param('vx', 0)\r\n                                .param('vy', 0)\r\n                                .param('vz', 0);\r\n\r\n    // Associative array\r\n    X(source).module('listener').param({\r\n        dopplerFactor : 1,\r\n        speedOfSound  : 343.3,\r\n        x  : 0,\r\n        y  : 0,\r\n        z  : 0,\r\n        fx : 0,\r\n        fy : 0,\r\n        fz : -1,\r\n        ux : 0,\r\n        uy : 1,\r\n        uz : 0,\r\n        vx : 0,\r\n        vy : 0,\r\n        vz : 0\r\n    });\r\n  \r\nIt is necessary to connect Panner for using the Listener.\r\n  \r\n### Get Parameters Collectively\r\n  \r\nAs associative array,\r\n  \r\n    var params = X(source).params();\r\n  \r\nAs JSON,\r\n  \r\n    var json = X(source).toJSON();\r\n  \r\n## Visualization\r\n  \r\n### Initialization\r\n  \r\nHTML\r\n  \r\n    ....\r\n\r\n    <dl>\r\n        <dt>TIME DOMAIN [ LEFT ]</dt>\r\n        <dd><canvas id=\"canvas-time-all-L\" width=\"360\" height=\"120\"></canvas></dd>\r\n        <dd id=\"svg-parent-L\"><svg id=\"svg-time-all-L\" width=\"360\" height=\"120\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"></svg></dd>\r\n    </dl>\r\n    <dl>\r\n        <dt>TIME DOMAIN [ RIGHT ]</dt>\r\n        <dd><canvas id=\"canvas-time-all-R\" width=\"360\" height=\"120\"></canvas></dd>\r\n        <dd id=\"svg-parent-R\"><svg id=\"svg-time-all-R\" width=\"360\" height=\"120\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"></svg></dd>\r\n    </dl>\r\n    <dl>\r\n        <dt>TIME DOMAIN</dt>\r\n        <dd><canvas id=\"canvas-time\" width=\"360\" height=\"120\"></canvas></dd>\r\n        <dd id=\"svg-parent-time\"><svg id=\"svg-time\" width=\"360\" height=\"120\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"></svg></dd>\r\n    </dl>\r\n    <dl>\r\n        <dt>FREQUENCY DOMAIN</dt>\r\n        <dd><canvas id=\"canvas-spectrum\" width=\"360\" height=\"120\"></canvas></dd>\r\n        <dd id=\"svg-parent-spectrum\"><svg id=\"svg-spectrum\" width=\"360\" height=\"120\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"></svg></dd>\r\n    </dl>\r\n\r\n    ....\r\n  \r\nIn the case of using HTML5 Canvas,\r\n  \r\n    // for drawing created sound\r\n    X('oscillator').module('analyser').domain('time').setup('canvas', 'canvas-time');     // Time domain\r\n    X('oscillator').module('analyser').domain('fft').setup('canvas', 'canvas-spectrum');  // Frequency domain\r\n\r\n    // for drawing one-shot audio\r\n    X('oneshot').module('analyser').domain('time').setup('canvas', 'canvas-time');     // Time domain\r\n    X('oneshot').module('analyser').domain('fft').setup('canvas', 'canvas-spectrum');  // Frequency domain\r\n\r\n    // for drawing audio\r\n    X('audio').module('analyser').domain('timeAllL').setup('canvas', 'canvas-time-all-L');  // Overview in time domain (L channel)\r\n    X('audio').module('analyser').domain('timeAllR').setup('canvas', 'canvas-time-all-R');  // Overview in time domain (R channel)\r\n    X('audio').module('analyser').domain('time').setup('canvas', 'canvas-time');            // Time domain\r\n    X('audio').module('analyser').domain('fft').setup('canvas', 'canvas-spectrum');         // Frequency domain\r\n\r\n    // for drawing media\r\n    X('media').module('analyser').domain('time').setup('canvas', 'canvas-time');     // Time domain\r\n    X('media').module('analyser').domain('fft').setup('canvas', 'canvas-spectrum');  // Frequency domain\r\n\r\n    // for drawing stream\r\n    X('stream').module('analyser').domain('time').setup('canvas', 'canvas-time');     // Time domain\r\n    X('stream').module('analyser').domain('fft').setup('canvas', 'canvas-spectrum');  // Frequency domain\r\n  \r\nIn the case of using HTML5 SVG,\r\n  \r\n    // for drawing created sound\r\n    X('oscillator').module('analyser').domain('time').setup('svg', 'svg-time', 'svg-parent-time');         // Time domain\r\n    X('oscillator').module('analyser').domain('fft').setup('svg', 'svg-spectrum', 'svg-parent-spectrum');  // Frequency domain\r\n\r\n    // for drawing one-shot audio\r\n    X('oneshot').module('analyser').domain('time').setup('svg', 'svg-time', 'svg-parent-time');         // Time domain\r\n    X('oneshot').module('analyser').domain('fft').setup('svg', 'svg-spectrum', 'svg-parent-spectrum');  // Frequency domain\r\n\r\n    // for drawing audio\r\n    X('audio').module('analyser').domain('timeAllL').setup('svg', 'svg-time-all-L', 'svg-parent-L');  // Overview in time domain (L channel)\r\n    X('audio').module('analyser').domain('timeAllR').setup('svg', 'svg-time-all-R', 'svg-parent-R');  // Overview in time domain (R channel)\r\n    X('audio').module('analyser').domain('time').setup('svg', 'svg-time', 'svg-parent-time');         // Time domain\r\n    X('audio').module('analyser').domain('fft').setup('svg', 'svg-spectrum', 'svg-parent-spectrum');  // Frequency domain\r\n\r\n    // for drawing media\r\n    X('media').module('analyser').domain('time').setup('svg', 'svg-time', 'svg-parent-time');         // Time domain\r\n    X('media').module('analyser').domain('fft').setup('svg', 'svg-spectrum', 'svg-parent-spectrum');  // Frequency domain\r\n\r\n    // for drawing stream\r\n    X('media').module('analyser').domain('time').setup('svg', 'svg-time', 'svg-parent-time');         // Time domain\r\n    X('media').module('analyser').domain('fft').setup('svg', 'svg-spectrum', 'svg-parent-spectrum');  // Frequency domain\r\n  \r\n### Access Parameters\r\n  \r\nThe following, the variable (\"source\") is one of 'oscillator', 'oneshot', 'audio', 'media', 'stream', 'mixer'.\r\n  \r\n    var source = /* 'oscillator' or 'oneshot' or 'audio' or 'media' or 'stream' or 'mixer' */;\r\n  \r\nAnd, the variable (\"domain\") is one of 'timeAllL', 'timeAllR', 'time', 'fft'.\r\n  \r\n    var domain = /* 'timeAllL' or 'timeAllR' or 'time' or 'fft' */;\r\n  \r\n#### Manage State\r\n  \r\n    // Getter\r\n    var state  = X(source).module('analyser').doamin(domain).state();  // Boolean type\r\n\r\n    // Setter\r\n    X(source).module('analyser').domain(domain).state(true);      // Boolean type\r\n    X(source).module('analyser').domain(domain).state('toggle');  // Change state according to current state\r\n  \r\n#### Analyser\r\n  \r\n    var params = {};\r\n\r\n    // Getter\r\n    params.fftSize               = X(source).module('analyser').param('fftSize');\r\n    params.minDecibels           = X(source).module('analyser').param('mindecibels');\r\n    params.maxdecibels           = X(source).module('analyser').param('maxDecibels');\r\n    params.smoothingTimeConstant = X(source).module('analyser').param('smoothingTimeConstant');\r\n\r\n    // Setter\r\n    X(source).module('analyser').param('fftSize', 2048);  // one of 32, 64, 128, 256, 512, 1024, 2048\r\n    X(source).module('analyser').param('mindecibels', -100);\r\n    X(source).module('analyser').param('maxDecibels', -30);\r\n    X(source).module('analyser').param('smoothingTimeConstant', 0.8);  // The range of value is between 0 and 1\r\n\r\n    // Method Chain\r\n    X(source).module('analyser').param('fftSize', 2048)\r\n                                .param('mindecibels', -100)\r\n                                .param('maxDecibels', -30)\r\n                                .param('smoothingTimeConstant', 0.8);\r\n\r\n    // Associative array\r\n    X(source).module('analyser').param({\r\n        fftSize               : 2048,\r\n        mindecibels           : -100,\r\n        maxDecibels           : -30,\r\n        smoothingTimeConstant : 0.8\r\n    });\r\n  \r\n#### Overview in Time Domain\r\n  \r\n    var params = {\r\n        shape        : 'line',                      // Wave shape ('line' or 'rect')\r\n        wave         : 'rgba(0, 0, 255, 1.0)',      // Wave color\r\n        grid         : 'rgba(255, 0, 0, 1.0)',      // Grid color (color sting or 'none')\r\n        currentTime  : 'rgba(255, 255, 255, 1.0)',  // Shape color (for current time)\r\n        text         : 'rgba(255, 255, 255, 1.0)',  // Text color (color string or 'none')\r\n        font         : '13px Arial',                // Text font\r\n        top          : 15,                          // Between audio wave graph and canvas border [px]\r\n        right        : 15,                          // Between audio wave graph and canvas border [px]\r\n        bottom       : 15,                          // Between audio wave graph and canvas border [px]\r\n        left         : 15,                          // Between audio wave graph and canvas border [px]\r\n        width        : 1.5,                         // Wave width (lineWidth)\r\n        cap          : 'round',                     // lineCap\r\n        join         : 'miter',                     // lineJoin\r\n        plotInterval : 0.0625,                      // Draw wave at intervals of this value [sec]\r\n        textInterval : 60                           // Draw text at intervals of this value [sec]\r\n    };\r\n  \r\n    The following, the variable \"key\" is one of properties in \"params\".  \r\n    And, the variable \"value\" is according to \"key\".\r\n  \r\n    var waveLs = {};\r\n    var waveRs = {};\r\n\r\n    // Getter\r\n    waveLs[key] = X('audio').module('analyser').domain('timeAllL').param(key);\r\n    waveRs[key] = X('audio').module('analyser').domain('timeAllR').param(key);\r\n\r\n    // Setter\r\n    X('audio').module('analyser').domain('timeAllL').param(key, value);\r\n    X('audio').module('analyser').domain('timeAllR').param(key, value);\r\n\r\n    // Method chain or Associative array ....\r\n  \r\nIn the case of displaying current time according to playing the audio,\r\n  \r\n    var drawCallback = function(currentTime) {\r\n        X('audio').param('currentTime', currentTime);\r\n\r\n        // ....\r\n    }\r\n\r\n    X('audio').module('analyser').domain('timeAllL').drag(drawCallback);\r\n    X('audio').module('analyser').domain('timeAllR').drag(drawCallback);\r\n  \r\n#### Time Domain\r\n  \r\n    var params = {\r\n        interval     : 500,                         // at intervals of drawing sound wave [msec] (by setTimeout) or 'auto' (by requestAnimationFrame)\r\n        shape        : 'line',                      // Wave shape ('line' or 'rect')\r\n        wave         : 'rgba(0, 0, 255, 1.0)',      // Wave color\r\n        grid         : 'rgba(255, 0, 0, 1.0)',      // Grid color\r\n        text         : 'rgba(255, 255, 255, 1.0)',  // Text color\r\n        font         : '13px Arial',                // Text font\r\n        top          : 15,                          // Between audio wave graph and canvas border [px]\r\n        right        : 15,                          // Between audio wave graph and canvas border [px]\r\n        bottom       : 15,                          // Between audio wave graph and canvas border [px]\r\n        left         : 15,                          // Between audio wave graph and canvas border [px]\r\n        width        : 1.5,                         // Wave width (lineWidth)\r\n        cap          : 'round',                     // lineCap\r\n        join         : 'miter',                     // lineJoin\r\n        textinterval : 60                           // Draw text at intervals of this value [sec]\r\n    };\r\n  \r\n    The following, the variable \"key\" is one of properties in \"params\".  \r\n    And, the variable \"value\" is according to \"key\".\r\n  \r\n    var times = {};\r\n\r\n    // Getter\r\n    times[key] = X(source).module('analyser').domain('time').param(key);\r\n\r\n    // Setter\r\n    X(source).module('analyser').domain('time').param(key, value);\r\n\r\n    // Method chain or Associative array ....\r\n  \r\n#### Frequency Domain (Spectrum)\r\n  \r\n    var params = {\r\n        interval     : 500,                         // at intervals of drawing sound wave [msec] (by setTimeout) or 'auto' (by requestAnimationFrame)\r\n        shape        : 'line',                      // Wave shape ('line' or 'rect')\r\n        wave         : 'rgba(0, 0, 255, 1.0)',      // Wave color\r\n        grid         : 'rgba(255, 0, 0, 1.0)',      // Grid color\r\n        text         : 'rgba(255, 255, 255, 1.0)',  // Text color\r\n        font         : '13px Arial',                // Text font\r\n        top          : 15,                          // Between audio wave graph and canvas border [px]\r\n        right        : 15,                          // Between audio wave graph and canvas border [px]\r\n        bottom       : 15,                          // Between audio wave graph and canvas border [px]\r\n        left         : 15,                          // Between audio wave graph and canvas border [px]\r\n        width        : 1.5,                         // Wave width (lineWidth)\r\n        cap          : 'round',                     // lineCap\r\n        join         : 'miter',                     // lineJoin\r\n        range        : 256,                         // the number of plots\r\n        textinterval : 1000                         // Draw text at intervals of this value [Hz]\r\n    };\r\n  \r\n    The following, the variable \"key\" is one of properties in \"params\".  \r\n    And, the variable \"value\" is according to \"key\".\r\n  \r\n    var ffts = {};\r\n\r\n    // Getter\r\n    ffts[key] = X(source).module('analyser').domain('fft').param(key);\r\n\r\n    // Setter\r\n    X(source).module('analyser').domain('fft').param(key, value);\r\n\r\n    // Method chain or Associative array ....\r\n  \r\n## Recording\r\n  \r\nThe following, the variable is one of 'oscillator', 'oneshot', 'audio', 'media', 'stream', 'mixer'.\r\n  \r\n    var source = /* 'oscillator' or 'oneshot' or 'audio' or 'media' or 'stream' or 'mixer' */;\r\n  \r\n### Initialization\r\n  \r\n    X(source).module('recorder').setup(4);  // The number of tracks\r\n  \r\n### Start Recording / Stop Recording\r\n  \r\n    if (X(source).module('recorder').getActiveTrack() === -1) {\r\n        // Start (Track 1)\r\n        X(source).module('recorder').ready(0);  // for example, if the number of tracks is 4, the range of this argument is between 0 and 3\r\n\r\n        // ....\r\n\r\n        X(source).start(/* arguments */);\r\n        X(source).module('recorder').start();\r\n    } else {\r\n        // Stop\r\n        X(source).module('recorder').stop();\r\n    }\r\n  \r\nIn the case of using WebRTC (MediaStreamAudioSourceNode),\r\n  \r\n    if (X('stream').module('recorder').getActiveTrack() === -1) {\r\n        // Start (Track 1)\r\n        // It is important that recorder starts before streaming\r\n        X('stream').module('recorder').ready(0).start();  // for example, if the number of tracks is 4, the range of this argument is between 0 and 3\r\n\r\n        // ....\r\n\r\n        X('stream').start();\r\n    } else {\r\n        // Stop\r\n        X('stream').module('recorder').stop();\r\n    }\r\n  \r\n### Clear\r\n  \r\n     // Delete recorded data in track 1\r\n     X(source).module('recorder').clear(0);  // for example, if the number of tracks is 4, the range of this argument is between 0 and 3\r\n  \r\n     // Delete recorded data in the all of tracks\r\n     X(source).module('recorder').clear('all');\r\n  \r\n### Create WAVE file\r\n  \r\n    // The 1st argument is track number or 'all'. If this argument is 'all', the all of tracks are mixed\r\n    // The 2nd argument is the number of channels. This argument is either 1 or 2. The default value is 2 channels\r\n    // The 3rd argument is quantization bit. This argument is either 8 or 16. The default value is 16 bit\r\n    var wave = X(source).module('recorder').create('all', 2, 16);\r\n  \r\n### Channel Gain\r\n  \r\n    // Getter\r\n    var L = X(source).module('recorder').param('gainL');  // The default value is 1\r\n    var R = X(source).module('recorder').param('gainR');  // The default value is 1\r\n\r\n    // Setter\r\n    X(source).module('recorder').param('gainL', 0.5);\r\n    X(source).module('recorder').param('gainR', 0.5);\r\n\r\n    // Method Chain\r\n    X(source).module('recorder').param('gainL', 0.5)\r\n                                .param('gainR', 0.5);\r\n\r\n    // Associative array\r\n    X(source).module('recorder').param({\r\n        gainL : 0.5,\r\n        gainR : 0.5\r\n    });\r\n  \r\n## Session\r\n  \r\nThe following, the variable is one of 'oscillator', 'oneshot', 'audio', 'media', 'stream', 'mixer'.\r\n  \r\n    var source = /* 'oscillator' or 'oneshot' or 'audio' or 'media' or 'stream' or 'mixer' */;\r\n  \r\n### Initialization\r\n  \r\n    // WebSocket's connection already exists ?\r\n    if (X(source).module('session').isConnected()) {\r\n        // Connection to server has existed already\r\n    } else {\r\n        X(source).module('session').setup({\r\n            tls   : false,                                   // Whether non TLS (ws:) or TLS (wss:)\r\n            host  : '210.152.156.200',                       // IP address or Host name\r\n            port  :'8000',                                   // Port number\r\n            path  : '/home/node/websocket/',                 // Path name\r\n            open  : function(event, socket) {\r\n                // \"event\" is event object on \"onopen\" event handler in the instance of WebSokcet\r\n                // \"socket\" is the instance of WebSokcet\r\n            },\r\n            close : function(event, socket) {\r\n                // \"event\" is event object on \"onclose\" event handler in the instance of WebSokcet\r\n                // \"socket\" is the instance of WebSokcet\r\n            },\r\n            error : function(event, socket) {\r\n                // \"event\" is event object on \"open\" event handler in the instance of WebSokcet\r\n                // \"socket\" is the instance of WebSokcet\r\n            }\r\n        });\r\n    }\r\n  \r\n### Start Session\r\n  \r\n    X(source).start(/* arguments */);\r\n    X(source).module('session').start();\r\n  \r\n### Stop Session\r\n  \r\n    X(source).module('session').state(false);  // Connection exists\r\n  \r\n### Manage State\r\n  \r\n    // Getter\r\n    var state  = X(source).module('session').state();  // Boolean type\r\n\r\n    // Setter\r\n    X(source).module('session').state(true);      // Boolean type\r\n    X(source).module('session').state('toggle');  // Change state according to current state\r\n  \r\n### Close\r\n  \r\n    X(source).module('session').close();  // Connection dose not exists\r\n  \r\n## MML (Music Macro Language)\r\n\r\n### Description Rule\r\n\r\n|  MUSIC             | MML                              |\r\n|:-------------------|:---------------------------------|\r\n| Scale              | C D E F G A B                    |\r\n| Duration           | 1 2 4 8 16 32 64 128 256         |\r\n| Triplet / Nonuplet | 6 8 12 18 24 36 48 72 96 144 192 |\r\n| Sharp              | +, #                             |\r\n| Flat               | \\-                               |\r\n| Rest               | R                                |\r\n| Dotted note        | .                                |\r\n| Tie                | &                                |\r\n| Octave             | O                                |\r\n| Tempo              | T                                |\r\n  \r\n#### Example\r\n  \r\n    var mml = 'T74O4AF+DB2AEB4G+4AF+C+2&AF+C+8F+8A8O5F+8AF+D2AEB4G+4 AF+D2BB4O6C+AE+2.&C+AE+8O5BG+16AF+16BG+E2G+B8AC+8G+B8EG+8F+C+A4.F+F+8G+G+8F+F+8G+G+4AF+C+2.BB4AEB2.&AEB8G+16F+16G+EB2R4';\r\n  \r\nIf multipart is used, it is requires to define separator.  \r\nBut, separator must not be the characters that are used by MML.\r\n  \r\n    var mml1 = 'T74O4AF+DB2AEB4G+4AF+C+2&AF+C+8F+8A8O5F+8AF+D2AEB4G+4 AF+D2BB4O6C+AE+2.&C+AE+8O5BG+16AF+16BG+E2G+B8AC+8G+B8EG+8F+C+A4.F+F+8G+G+8F+F+8G+G+4AF+C+2.BB4AEB2.&AEB8G+16F+16G+EB2R4';\r\n    var mml2 = 'T74O2B2O3C+2D1O2B2O3C+2D2E2O2A1E1F+2E2O3DD1EE1&EE1';\r\n\r\n    // for example, '||' is separator.\r\n    var mml = mml1 + '||' + mml2;\r\n  \r\n### Initialization\r\n  \r\n    X('mml').setup({\r\n        start : function(sequence, index) {\r\n            // When the MML starts, this callback function is executed\r\n\r\n            // \"sequence\" is associative array for playing the MML.\r\n            // This has the following properties.\r\n            //    sequence.indexes;      // for X('oneshot')\r\n            //    sequence.frequencies;  // for X('oscillator')\r\n            //    sequence.start;        // the start time of notes\r\n            //    sequence.duration;     // the duration of notes\r\n            //    sequence.stop;         // the stop time of notes (this is total of \"start\" and \"duration\")\r\n        },\r\n        stop : function(sequence, index) {\r\n            // When the MML stopped, this callback function is executed\r\n        },\r\n        ended : function() {\r\n            // When the MML ended, this callback function is executed\r\n        },\r\n        error : function(error, note) {\r\n            // \"error\" is one of 'TEMPO', 'OCTAVE', 'NOTE', 'MML'\r\n            // \"note\" is invalid MML string\r\n        }\r\n    });\r\n  \r\n### Parse MML\r\n  \r\n    var mml1 = 'T74O4AF+DB2AEB4G+4AF+C+2&AF+C+8F+8A8O5F+8AF+D2AEB4G+4 AF+D2BB4O6C+AE+2.&C+AE+8O5BG+16AF+16BG+E2G+B8AC+8G+B8EG+8F+C+A4.F+F+8G+G+8F+F+8G+G+4AF+C+2.BB4AEB2.&AEB8G+16F+16G+EB2R4';\r\n    var mml2 = 'T74O2B2O3C+2D1O2B2O3C+2D2E2O2A1E1F+2E2O3DD1EE1&EE1';\r\n\r\n    // for example, '||' is separator.\r\n    var mml = mml1 + '||' + mml2;  // for example, Get this string from <input type=\"text\">, <textarea> ... etc\r\n\r\n    var mmls = mml.split.split('||');\r\n\r\n    X('mml').ready(X('oneshot'), mmls);\r\n\r\nIn the case of using \"X('oscillator')\", (Please refer \"Clone Sound Source\" section about \"clone\" method in \"X\" object)\r\n\r\n    var clones  = [];\r\n    var sources = [];\r\n\r\n    for (var i = 0, len = mmls.length; i < len; i++) {\r\n        var cloned = X.clone();\r\n\r\n        clones.push(cloned);\r\n        sources.push(cloned('oscillator'));\r\n    }\r\n  \r\n    for (var i = 0, len = clones.length i < len; i++) {\r\n        clones[i]('mml').setup({\r\n            start : function(sequence, index) {\r\n                X('mixer').mix(sources);\r\n            }\r\n        }).ready(clones[i]('oscillator'), mmls[i]);\r\n    }\r\n  \r\n### Start MML\r\n  \r\n    var parts = X('mml').get();\r\n\r\n    for (var i = 0, len = parts.length; i < len; i++) {\r\n        X('mml').start(i);\r\n    }\r\n  \r\nIn the case of using \"X('oscillator')\",\r\n  \r\n    var sources = [];\r\n\r\n    for (var i = 0, len = clones.length; i < len; i++) {\r\n        clones[i]('mml').start(0);\r\n    }\r\n\r\n    X('mixer').mix(sources);\r\n  \r\n### Stop MML\r\n  \r\n    X('mml').stop();\r\n  \r\n## Clone Sound Source\r\n  \r\nIn the case of cloning sound source,\r\n  \r\n    // Clone \"X\" object\r\n    var cloned = X.clone();\r\n\r\n    console.assert(X               === cloned);                // Assertion failed\r\n    console.assert(X('oscillator') === cloned('oscillator'));  // Assertion failed\r\n    console.assert(X('oneshot')    === cloned('oneshot'));     // Assertion failed\r\n    console.assert(X('audio')      === cloned('audio'));       // Assertion failed\r\n    console.assert(X('media')      === cloned('media'));       // Assertion failed\r\n    console.assert(X('fallback')   === cloned('fallback'));    // Assertion failed\r\n    console.assert(X('stream')     === cloned('stream'));      // Assertion failed\r\n    console.assert(X('mixer')      === cloned('mixer'));       // Assertion failed\r\n    console.assert(X('mml')        === cloned('mml'));         // Assertion failed\r\n  \r\n","google":"UA-41390233-1","note":"Don't delete this file! It's used internally to help with page regeneration."}